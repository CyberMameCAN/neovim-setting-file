# Theme
[[plugins]]
""repo = 'jacoborus/tender.vim'
repo = "folke/tokyonight.nvim"

[[plugins]]
repo = 'previm/previm'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
#on_event = 'CursorHold'
#hook_add = """
#let g:denops_server_addr = '127.0.0.1:32123'
#call jobstart(
#  \'deno run -A --no-check ' . dein#get('denops.vim').path . '/denops/
#@denops
#-private/cli.ts',
#  \{'detach': v:true}
#  \)
#"""

[[plugins]]
repo = 'vim-airline/vim-airline'

#[[plugins]]
#repo = 'preservim/nerdtree'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
# merged = 0
hook_add = '''
  let g:coc_global_extensions = [
    \'@yaegassy/coc-volar',
    \'coc-css',
    \'coc-docker',
    \'coc-eslint',
    \'coc-git',
    \'coc-html',
    \'coc-json',
    \'coc-lua',
    \'coc-markdownlint',
    \'coc-phpls',
    \'coc-prettier',
    \'coc-sql',
    \'coc-sumneko-lua',
    \'coc-toml',
    \'coc-tsserver',
    \'coc-vimlsp',
    \'coc-jedi',
    \'coc-diagnostic',
  \]
  inoremap <silent><expr> <c-space> coc#refresh()
  inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> <C-w>gd <cmd>vs<cr><Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gF <Plug>(coc-references)
  nmap <f2> <Plug>(coc-rename)
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  nmap <esc><esc> <cmd>call coc#float#close_all()<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <leader>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>
  nnoremap <silent> gh :call <SID>show_documentation()<CR>
  nnoremap <silent> <leader>a <cmd>CocAction<cr>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction
  " higlight when hover cursor
  autocmd CursorHold * silent call CocActionAsync('highlight')
'''

